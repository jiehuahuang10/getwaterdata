name: 每日水务数据自动更新

on:
  schedule:
    # 每天下午6点执行 (UTC时间10:00 = 北京时间18:00)
    - cron: '0 10 * * *'
    # 每天下午6:30备份执行（防止第一次失败）
    - cron: '30 10 * * *'
    # 每周一上午9点保持活跃 (UTC时间1:00 = 北京时间9:00)
    - cron: '0 1 * * 1'
  workflow_dispatch: # 允许手动触发

jobs:
  update-water-data:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置30分钟超时
    permissions:
      contents: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests beautifulsoup4 openpyxl
    
    - name: 创建配置文件
      run: |
        echo "LOGIN_URL=${{ secrets.LOGIN_URL }}" > config.env
        echo "USERNAME=${{ secrets.USERNAME }}" >> config.env
        echo "PASSWORD=${{ secrets.PASSWORD }}" >> config.env
        echo "REPORT_URL=${{ secrets.REPORT_URL }}" >> config.env
    
    - name: 执行水务数据更新（带重试机制）
      id: update_data
      run: |
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
          echo "🔄 尝试执行（第 $((RETRY_COUNT + 1)) 次）..."
          
          if python github_automation.py; then
            echo "✅ 执行成功！"
            SUCCESS=true
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "❌ 执行失败，等待30秒后重试..."
              sleep 30
            else
              echo "❌ 达到最大重试次数，执行失败"
              exit 1
            fi
          fi
        done
      env:
        TZ: Asia/Shanghai
        LOGIN_URL: ${{ secrets.LOGIN_URL }}
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
        REPORT_URL: ${{ secrets.REPORT_URL }}
      continue-on-error: true
    
    - name: 检查执行结果
      id: check_result
      run: |
        if [ -f "last_execution_summary.json" ]; then
          echo "执行摘要存在"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "执行摘要不存在，可能执行失败"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
    
    # 飞书同步功能已暂时禁用
    # 原因：GitHub Actions 服务器在海外，无法访问飞书 API
    # 如需启用，请在国内服务器环境运行
    # - name: 同步到飞书云空间
    #   if: steps.check_result.outputs.success == 'true'
    #   run: |
    #     echo "=================================="
    #     echo "📤 开始同步文件到飞书云空间..."
    #     echo "=================================="
    #     python feishu_sync.py
    #   env:
    #     FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
    #     FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
    #     FEISHU_FOLDER_TOKEN: ${{ secrets.FEISHU_FOLDER_TOKEN }}
    #   continue-on-error: true
    
    - name: 提交更新的Excel文件
      if: steps.check_result.outputs.success == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add excel_exports/石滩供水服务部每日总供水情况.xlsx
        git add *.json
        git add last_execution_summary.json
        if git diff --staged --quiet; then
          echo "没有文件更改"
        else
          git commit -m "自动更新水务数据 - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        fi
    
    - name: 创建执行状态徽章
      if: always()
      run: |
        # 创建执行状态文件
        if [ "${{ steps.check_result.outputs.success }}" == "true" ]; then
          echo "✅ 最后执行成功: $(date +'%Y-%m-%d %H:%M:%S')" > execution_status.md
        else
          echo "❌ 最后执行失败: $(date +'%Y-%m-%d %H:%M:%S')" > execution_status.md
        fi
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add execution_status.md
        git commit -m "更新执行状态 - $(date +'%Y-%m-%d %H:%M:%S')" || true
        git push || true
    
    - name: 验证Excel文件更新
      if: steps.check_result.outputs.success == 'true'
      run: |
        EXCEL_FILE="excel_exports/石滩供水服务部每日总供水情况.xlsx"
        
        if [ -f "$EXCEL_FILE" ]; then
          FILE_SIZE=$(stat -f%z "$EXCEL_FILE" 2>/dev/null || stat -c%s "$EXCEL_FILE" 2>/dev/null)
          LAST_MODIFIED=$(stat -f%Sm "$EXCEL_FILE" 2>/dev/null || stat -c%y "$EXCEL_FILE" 2>/dev/null)
          
          echo "✅ Excel文件存在"
          echo "📁 文件大小: $FILE_SIZE 字节"
          echo "🕒 最后修改: $LAST_MODIFIED"
          
          # 检查文件大小是否合理（应该大于100KB）
          if [ "$FILE_SIZE" -lt 100000 ]; then
            echo "⚠️ 警告: Excel文件大小异常小，可能未正确更新"
          fi
        else
          echo "❌ 错误: Excel文件不存在"
          exit 1
        fi
    
    - name: 失败通知
      if: failure()
      run: |
        echo "=================================="
        echo "❌ GitHub Actions执行失败"
        echo "=================================="
        echo "失败时间: $(date +'%Y-%m-%d %H:%M:%S')"
        echo "失败原因: 请查看上面的日志详情"
        echo "日志链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "📋 可能的原因:"
        echo "  1. 网络连接问题"
        echo "  2. 登录凭证过期"
        echo "  3. 水务系统维护中"
        echo "  4. Excel文件损坏"
        echo ""
        echo "🔧 建议操作:"
        echo "  1. 检查GitHub Secrets配置"
        echo "  2. 手动触发workflow_dispatch测试"
        echo "  3. 查看kdocs-maintenance是否正常运行"
        echo "=================================="
    
    - name: 成功通知
      if: success()
      run: |
        echo "=================================="
        echo "✅ GitHub Actions执行成功"
        echo "=================================="
        echo "执行时间: $(date +'%Y-%m-%d %H:%M:%S')"
        echo "更新日期: $(date -d yesterday +'%Y-%m-%d' 2>/dev/null || date -v-1d +'%Y-%m-%d' 2>/dev/null)"
        echo ""
        echo "✅ Excel文件已成功更新并推送到GitHub"
        echo ""
        echo "📊 下次执行时间: 明天下午6:00（北京时间）"
        echo "🔗 GitHub查看: https://github.com/jiehuahuang10/getwaterdata"
        echo "=================================="
